---
layout: post
title: "初探 RxJS"
date: 2016-08-26 12:00:00
categories: js
---

當您看到這篇文章，我想您正好奇學習關於 `Reactive programming`，特別是關於 Rx 以及 Bacon.js 與 RAC 等等這類函式庫。
學習這東西蠻困難的，尤其是缺乏好的教材。當我開始學習時，我試著尋找教學，我只找到少數有幫助的文章，而且他們談論的非常淺，都沒有談論到關於使用它建置整個架構的環節。函式庫的文件手冊通常不會幫助我們理解原理，舉例來說：

> *Rx.Observable.prototype.flatmapLatest(selector, [thisArg])*
> 依續映射每一個`觀察模式的序列`組成另外一個新的序列，結合元素的索引，從最新的觀察序列，轉換序列中的序列成為一個`目的是產生值`的觀察序列

天啊！這到底在說什麼！？

我曾經讀過兩本書，其中一本只有一張圖，另一本只專注介紹如何使用 `Reactive Libaray`。最後我只好透過笨方法來學習響應式程式，透過實作並在專案中使用它來學習。

在這段過程中最困難的部分是關於`反應`, `響應` `Reactive` 的核心想法，很大一部分是在講關於除去舊的開發思維 - 主動驅使(下命令)與管理狀態這兩種典型直覺思路，並強迫我們的大腦用不同思路模型去架構程式。至今我還沒在網路上找到任何這方面的教學，我認為世上需要一份實用的並針對 Reactive 核心思想的教學來幫助您，在學習這些觀念之後您在閱讀官方的函式庫手冊時會相對容易理解。

# 響應式編程(Reactive Programming)是什麼？

在網路上充滿了糟糕的解釋與定義。維基百科上的說明過於理論不易理解，stackoverflow 的回答明顯的對於初學者來說不太友善，[Reactive Manifesto](http://www.reactivemanifesto.org/) 的內容比較像是專案經理或公司該閱讀的。

從 Microsoft 的角度看 Rx 大略就是 `Rx = Observables + LINQ + Schedules` 這樣說明又太微軟化導致其他開發者容易感到困惑。像 `Reactive` `轉換的傳遞` 這樣的術語並不能說明什麼，尤其是關於 `MV*` 與之間有什麼不同。

一般來說我們的視圖(view)會反應資料模型(model)，當然更新也需要傳遞，如果不這麼做的話，那麼頁面上什麼都不會變。

因此讓我們去掉廢話吧

響應式編程或稱 `Reactive Programming` 就是使用非同步資料流結構與思路來撰寫程式



# 參考資源

* [RxJS 入門中文](http://blog.techbridge.cc/2016/05/28/reactive-programming-intro-by-rxjs/)
* [視覺化說明](http://rxmarbles.com/#map)
